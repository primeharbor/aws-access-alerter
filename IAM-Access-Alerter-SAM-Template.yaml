# MIT License

# Copyright (c) 2019-2023 Chris Farris <chris@primeharbor.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  Generate Email Alerts from IAM Access Analyzer when a resource is made public
  Authored by Chris Farris <chris@chrisfarris.com>

Parameters:

  pLogLevel:
    Description: Lambda Logging Level
    Type: String
    Default: "INFO"
    AllowedValues:
      - "INFO"
      - "DEBUG"

  pEmailAddress:
    Description: If set, emails will be sent to this address, in addition to the Topic
    Type: String

  pEmailSender:
    Description: If set, emails will be sent from this address rather than the recipient email address
    Type: String
    Default: NONE

  pFunctionName:
    Description: Name of the function to deploy.
    Type: String
    Default: iam-access-alerter

  pCreateAnalyzer:
    Description: Set this to false to disable the creation of an additional Analyzer
    Type: String
    Default: "True"
    AllowedValues:
      - "False"
      - "True"

  pAnalyzerType:
    Description: Create an organizational or local account Analyzer
    Type: String
    AllowedValues:
      - ACCOUNT
      - ORGANIZATION
    Default: ORGANIZATION

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: Analyzer
        Parameters:
          - pAnalyzerType
          - pCreateAnalyzer
      - Label: Email Settings
        Parameters:
          - pEmailAddress
          - pEmailSender
      - Label: Lambda
        Parameters:
          - pFunctionName
          - pLogLevel
    ParameterLabels:
      pLogLevel: Lambda Logging Level
      pEmailAddress: Alert Email Recipient
      pEmailSender: Email Sender
      pFunctionName: Name of the Lambda Function to send the emails
      pCreateAnalyzer: Create a new Analyzer
      pAnalyzerType: Analyzer Type (ACCOUNT or ORGANIZATION)

Conditions:
  CreateAnalyzer: !Equals [ !Ref pCreateAnalyzer, "True"]
  SendFromRecipient: !Equals [ !Ref pEmailSender, "NONE"]

Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMAccessAnalyzerReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: "arn:aws:logs:*:*:*"
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
      - PolicyName: SendEmails
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ses:*   #FIXME
            Resource:
            - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${pEmailAddress}
            - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${pEmailSender}
      - PolicyName: GetAccountDetails
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - iam:ListAccountAliases
            Effect: Allow

  EmailFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${pFunctionName}"
      Description: Sends emails based on IAM Access Advisor Findings
      Handler: index.handler
      Runtime: python3.11
      Timeout: 150
      MemorySize: 768
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EMAIL_TO: !Ref pEmailAddress
          EMAIL_FROM: !If [SendFromRecipient, !Ref pEmailAddress, !Ref pEmailSender]
          LOG_LEVEL: !Ref pLogLevel
      # Tags inherited from Stack
      InlineCode: |
        # MIT License - Copyright (c) 2019-2023 Chris Farris <chris@primeharbor.com>
        import boto3
        from botocore.exceptions import ClientError
        import json
        import os
        import datetime
        from email.mime.application import MIMEApplication
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText

        import logging
        logger = logging.getLogger()
        logger.setLevel(getattr(logging, os.getenv('LOG_LEVEL', default='INFO')))
        logging.getLogger('botocore').setLevel(logging.WARNING)
        logging.getLogger('boto3').setLevel(logging.WARNING)
        logging.getLogger('urllib3').setLevel(logging.WARNING)


        def handler(event, context):
            logger.debug("Received event: " + json.dumps(event, sort_keys=True))
            message = json.loads(event['Records'][0]['Sns']['Message'])
            logger.info("Received message: " + json.dumps(message, sort_keys=True))

            finding = message['detail']
            if finding['status'] != "ACTIVE":
                logger.debug(f"Finding is of status: {finding['status']}")
                return(event)

            if 'error' in finding and finding['error'] == "ACCESS_DENIED":
                logger.debug(f"Unable to access resource {finding['resource']}")
                return(event)

            account_alias = None
            account_desc = f"{finding['accountId']}"
            if message['account'] == finding['accountId']:
                # Get the local IAM Alias
                iam_client = boto3.client('iam')
                response = iam_client.list_account_aliases()
                if 'AccountAliases' in response and len(response['AccountAliases']) > 0:
                    account_alias = response['AccountAliases'][0]
                    account_desc = f"{account_alias} ({finding['accountId']})"
            else:
                # This is another account in the org, get the name from Orgs
                try:
                    org_client = boto3.client('organizations')
                    response = org_client.describe_account( AccountId=finding['accountId'] )
                    account_alias = response['Account']['Name']
                    account_desc = f"{account_alias} ({finding['accountId']})"
                except Exception as e:
                    logger.error(f"Error getting Account Details from organizations: {e}")

            try:
                # Make some notes based on attributes of the finding
                if finding['isPublic']:
                    subject = f"New Public Resource found in {account_desc}"
                    intro = f"A New Public Resource has been discovered in your account {account_desc}:"
                    explanation = "This resource can be accessed by anyone on the Internet"
                elif finding['resourceType'] == "AWS::IAM::Role" and 'Federated' in finding['principal']:
                    subject = f"New SAML Federation found in {account_desc}"
                    intro = f"A New SAML Federation has been discovered in {account_desc}: "
                    explanation = "Make sure the identity provider noted above as the Trusted Entity belongs to your organization and has appropriate security controls in place."
                elif finding['resourceType'] == "AWS::IAM::Role":
                    subject = f"New cross-account role found in {account_desc}"
                    intro = f"A New cross-account role has been discovered in {account_desc}: "
                    explanation = "The trusted entity above has permissions to perform actions in your account. You should validate that account's identity and perform a risk-assessment on it. \n Note: The actions that can be performed are not reported by the IAM Access Analyzer and should be inspected for least privilege."
                elif 'AWS' in finding['principal'] and finding['principal']['AWS'] == "*":
                    subject = f"New un-authenticated resource found in {account_desc}"
                    intro = f"A New resource has been discovered in {account_desc} that does not require IAM Authentication: "
                    explanation = "The above resource does not require AWS IAM Authentication to access. All security measures rely on the conditions noted above"
                else:
                    subject = f"New Resource trust found in {account_desc}"
                    intro = f"A New Trust has been discovered in your account {account_desc}: "
                    explanation = "The above resource is accessible to the Trusted Entity for the actions noted above"

                # Show account number of * if that's the trust, otherwise the entire principal in json.
                if 'AWS' in finding['principal']:
                    trusted_entity = finding['principal']['AWS']
                else:
                    trusted_entity = finding['principal']

                # Create a message body
                txt_body = f"""{intro}
        Resource: {finding['resource']}
        Type: {finding['resourceType']}
        Region: {finding['region']}
        Trusted Entity: {trusted_entity}
        Actions: {json.dumps(finding['action'], sort_keys=True)}
        Conditions: {finding['condition']}

        {explanation}
        """
                html_body = f"""{intro}<p>
                    <b>Resource:</b> {finding['resource']}<br>
                    <b>Type:</b> {finding['resourceType']}<br>
                    <b>Region:</b> {finding['region']}<br>
                    <b>Trusted Entity:</b> {trusted_entity}<br>
                    <b>Actions:</b> {json.dumps(finding['action'], sort_keys=True)}<br>
                    <b>Conditions:</b> {finding['condition']}<br>
                    <p>
                    {explanation}
                    """
                logger.info(f"Subject: {subject}\n Body: {txt_body}")
                send_email(subject, txt_body, html_body)
                return(event)

            except ClientError as e:
                logger.critical("AWS Error getting info: {}".format(e))
                raise
            except Exception as e:
                logger.critical("{}".format(e))
                raise

        def send_email(subject, txt_body, html_body):
            # Always send emails via us-east-1 where SES is available and configured
            ses_client = boto3.client('ses', region_name='us-east-1')
            message = MIMEMultipart()
            message['From'] = os.environ['EMAIL_FROM']
            message['To'] = os.environ['EMAIL_TO']
            message['Subject'] = subject

            body = MIMEMultipart('alternative')
            body.attach(MIMEText(txt_body, 'plain')) # Text body of the email
            body.attach(MIMEText(html_body, 'html')) # HTML body of the email
            message.attach(body)

            logger.info("Sending email to {}".format(message['To']))
            response = ses_client.send_raw_email(
                Source=message['From'],
                RawMessage={
                'Data': message.as_string(),
            })

        ### END OF CODE ###

  IAMAccessAnalyzer:
    Type: AWS::AccessAnalyzer::Analyzer
    Condition: CreateAnalyzer
    Properties:
      AnalyzerName: !Sub "${AWS::StackName}"
      Type: !Ref pAnalyzerType

  AnalyzerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: AccessAnalyzerEvents
      State: ENABLED
      EventPattern:
        source:
          - "aws.access-analyzer"
        detail-type:
          - "Access Analyzer Finding"
      Targets:
        - Arn: !Ref AnalyzerEventTopic
          Id: IAMAccessAnalyzerTopic

  AnalyzerEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Topic for events from ${AWS::StackName}"

  AnalyzerEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
      - !Ref 'AnalyzerEventTopic'
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: EventBridgePublish
          Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Resource: '*'
          Action: SNS:Publish
          # Condition:
          #   StringEquals:
          #     aws:SourceAccount: !Ref AWS::AccountId


  EmailLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EmailFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref AnalyzerEventTopic
      Action: lambda:invokeFunction

  EmailTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt EmailFunction.Arn
      Protocol: lambda
      TopicArn: !Ref 'AnalyzerEventTopic'


Outputs:
  StackName:
    Description: Name of this Stack
    Value: !Ref AWS::StackName

  TemplateVersion:
    Description: Version of this CFT
    Value: 0.0.5

  TopicArn:
    Description: Arn of the topic findings are sent to
    Value: !Ref AnalyzerEventTopic